############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.
# For example java -Djava.util.logging.config.file=myfile
# See docs for details:
# http://docs.oracle.com/javase/7/docs/api/java/util/logging/FileHandler.html
# and
# http://docs.oracle.com/javase/7/docs/api/java/util/logging/SimpleFormatter.html
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = services.%u.log
#java.util.logging.FileHandler.limit = 500000

# how many files to keep rolling
#java.util.logging.FileHandler.count = 3


java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
# with jdk7 it can be passed directly to JVM
#-Djava.util.logging.SimpleFormatter.format='..'
java.util.logging.SimpleFormatter.format= %4$-7s| %1$tF %1$tT| %2$-90s| %5$s%6$s%n

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = FINER
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

############################################################
# XONIX
############################################################
hu.tinca.xonix.model.Advancer.level= FINER